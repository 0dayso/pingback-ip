<?xml version="1.0"?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net"/>
  </configSections>
  <appSettings>
    <!--是否调试模式 "true"/"false"-->
    <add key="Debug" value="true"/>
    <!--是否启用消息队列 "true"/"false"-->
    <add key="EnableMessageQueue" value="false"/>
    <!--投保消息队列名称-->
    <add key="Queue.Issuing" value="Queue.renwoxIssuing"/>
    <!--短消息队列名称-->
    <add key="Queue.SMS" value="Queue.renwoxSMS"/>
    <!--退保队列名称-->
    <add key="Queue.Withdraw" value="Queue.renwoxWithdraw"/>
    <!--是否可以重复下单 "true"/"false"-->
    <add key="IsDuplicable" value="false"/>
    <!--系统暂停使用的原因,使用[br]来换行-->
    <add key="SystemFailInfo" value=""/>
    <!--时间来源：Local-本机，NTSC-国家授时中心-->
    <add key="RequestTimeFrom" value="Local"/>
    <!--最晚投保时间限制：起飞前0分钟-->
    <add key="IssuingDeadline" value="11"/>
    <!--永诚接口地址，端口号-->
    <add key="YongChengIssuing" value="116.228.173.252,8080"/>
    <!--中国人寿广东分公司接口地址-->
    <add key="ChinaLife_GD_Issuing" value="http://121.8.126.173:7788/WebRoot/ag_post_application.jsp"/>
    <!--立刻保url,用户名，保当日的产品代码，保次日的产品代码，退保邮件-->
    <add key="Like18_Issuing" value="http://www.like18.com/webservice/,bjjingji,9971,9981,pingback@gmail.com"/>
    <add key="InstonyIssuing" value="Cra5oOcsHg0="/>
    <add key="ConnectionString" value="Provider=SQLOLEDB.1;Password=sasql2005;Persist Security Info=True;User ID=sa;Initial Catalog=eagle2;Data Source=113.107.43.118,1444;"/>
  </appSettings>
  <connectionStrings>
    <add name="InsuranceAviation" connectionString="Server=115.238.251.146,1444;Database=pax;Uid=sa;Pwd=sasql2005" providerName="System.Data.SqlClient"/>
  </connectionStrings>
  <system.web>
    <authorization>
      <allow users="*"/>
    </authorization>
    <!-- 
            设置 compilation debug="true" 可将调试符号插入
            已编译的页面中。但由于这会 
            影响性能，因此只在开发过程中将此值 
            设置为 true。
        -->
    <compilation debug="true" targetFramework="4.0">
    </compilation>
    <!--
            通过 <authentication> 节可以配置 ASP.NET 用来 
            识别进入用户的
            安全身份验证模式。 
        -->
    <authentication mode="Windows"/>
    <!--
            如果在执行请求的过程中出现未处理的错误，
            则通过 <customErrors> 节可以配置相应的处理步骤。具体说来，
            开发人员通过该节可以配置
            要显示的 html 错误页
            以代替错误堆栈跟踪。

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm" />
            <error statusCode="404" redirect="FileNotFound.htm" />
        </customErrors>
        -->
    <pages controlRenderingCompatibilityVersion="4.0" clientIDMode="AutoID"/>
  </system.web>
  <!-- 
        在 Internet 信息服务 7.0 下运行 ASP.NET AJAX 需要 system.webServer
        节。对早期版本的 IIS 来说则不需要此节。
    -->
  <unity>
    <containers>
      <container>
        <types>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="ChinaLife_GD.Issuing, IAClass" name="chinalife"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="YongCheng.Issuing, IAClass" name="alltrust"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="Like18.Issuing, IAClass" name="like18"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="Jiandanbao.Issuing_All, IAClass" name="jiandanbao_All"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="Jiandanbao.Issuing_Free, IAClass" name="jiandanbao_Free"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="ChinaLife_BJ.Issuing, IAClass" name="chinalife_bj"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="Huayubaoxian.Issuing, IAClass" name="Huayubaoxian"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="Instony.Issuing, IAClass" name="Instony"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="JinHang.Issuing, IAClass" name="JinHang"/>
          <type type="IAClass.Issuing.IIssuing, IAClass" mapTo="Pingan.Issuing, IAClass" name="PingAn"/>
          <type type="IAClass.SMS.ISMS, IAClass" mapTo="ShangTong.SMS, IAClass" name="ShangTong"/>
        </types>
      </container>
    </containers>
  </unity>
  <log4net>
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <!--文件名开头,包括路径，可以是文件名的前缀部分，也可以仅仅是目录-->
      <param name="File" value="Log/" />
      <!--<Encoding value="UTF-8" />-->
      <param name="AppendToFile" value="true" />
      <!--最多产生的日志文件数（-1表示不限）-->
      <param name="MaxSizeRollBackups" value="-1" />
      <!--当RollingStyle为Date的时候不起作用-->
      <param name="MaximumFileSize " value="1KB" />
      <param name="StaticLogFileName" value="false" />
      <!--扩展名部分需加单引号-->
      <param name="DatePattern" value="yyyy-MM-dd'.log'" />
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Date" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern" value="%n%date%newline%message%n " />
      </layout>
    </appender>
    <!--log4net.LogManager.GetLogger("logerror")用这个来选择这种类型-->
    <!--<logger name="logerror">
            <level value="ERROR" />
            <appender-ref ref="RollingLogFileAppender" />
        </logger>-->
    <!--根logger，所有其它logger都默认继承它，如果配置文件里没有其他显式定义的logger，则框架使用本节点定义的属性-->
    <root>
      <level value="Debug" />
      <appender-ref ref="RollingLogFileAppender" />
    </root>
  </log4net>
</configuration>
