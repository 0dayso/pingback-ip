//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 
namespace Instony
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InstonyServiceSoap", Namespace="http://tempuri.org/")]
    public partial class InstonyService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback doSaleServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CannelPolicyByPolicyNosOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPdfUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPdfUrlTOB2COperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMobileMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPolicyNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderNumOperationCompleted;
        
        /// <remarks/>
        public InstonyService() {
            this.Url = "http://www.instony.com:8023/ws/instonyservice.asmx";
        }
        
        /// <remarks/>
        public event doSaleServiceCompletedEventHandler doSaleServiceCompleted;
        
        /// <remarks/>
        public event CannelPolicyByPolicyNosCompletedEventHandler CannelPolicyByPolicyNosCompleted;
        
        /// <remarks/>
        public event GetPdfUrlCompletedEventHandler GetPdfUrlCompleted;
        
        /// <remarks/>
        public event GetPdfUrlTOB2CCompletedEventHandler GetPdfUrlTOB2CCompleted;
        
        /// <remarks/>
        public event GetBalanceCompletedEventHandler GetBalanceCompleted;
        
        /// <remarks/>
        public event SendMobileMessageCompletedEventHandler SendMobileMessageCompleted;
        
        /// <remarks/>
        public event SendEmailMessageCompletedEventHandler SendEmailMessageCompleted;
        
        /// <remarks/>
        public event GetProductAmountCompletedEventHandler GetProductAmountCompleted;
        
        /// <remarks/>
        public event GetPolicyNumCompletedEventHandler GetPolicyNumCompleted;
        
        /// <remarks/>
        public event GetOrderNumCompletedEventHandler GetOrderNumCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSaleService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string doSaleService(string xmlstr, string certificateKey) {
            object[] results = this.Invoke("doSaleService", new object[] {
                        xmlstr,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegindoSaleService(string xmlstr, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("doSaleService", new object[] {
                        xmlstr,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EnddoSaleService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doSaleServiceAsync(string xmlstr, string certificateKey) {
            this.doSaleServiceAsync(xmlstr, certificateKey, null);
        }
        
        /// <remarks/>
        public void doSaleServiceAsync(string xmlstr, string certificateKey, object userState) {
            if ((this.doSaleServiceOperationCompleted == null)) {
                this.doSaleServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSaleServiceOperationCompleted);
            }
            this.InvokeAsync("doSaleService", new object[] {
                        xmlstr,
                        certificateKey}, this.doSaleServiceOperationCompleted, userState);
        }
        
        private void OndoSaleServiceOperationCompleted(object arg) {
            if ((this.doSaleServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSaleServiceCompleted(this, new doSaleServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CannelPolicyByPolicyNos", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CannelPolicyByPolicyNos(string policyNos, string certificateKey) {
            object[] results = this.Invoke("CannelPolicyByPolicyNos", new object[] {
                        policyNos,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCannelPolicyByPolicyNos(string policyNos, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CannelPolicyByPolicyNos", new object[] {
                        policyNos,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCannelPolicyByPolicyNos(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CannelPolicyByPolicyNosAsync(string policyNos, string certificateKey) {
            this.CannelPolicyByPolicyNosAsync(policyNos, certificateKey, null);
        }
        
        /// <remarks/>
        public void CannelPolicyByPolicyNosAsync(string policyNos, string certificateKey, object userState) {
            if ((this.CannelPolicyByPolicyNosOperationCompleted == null)) {
                this.CannelPolicyByPolicyNosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCannelPolicyByPolicyNosOperationCompleted);
            }
            this.InvokeAsync("CannelPolicyByPolicyNos", new object[] {
                        policyNos,
                        certificateKey}, this.CannelPolicyByPolicyNosOperationCompleted, userState);
        }
        
        private void OnCannelPolicyByPolicyNosOperationCompleted(object arg) {
            if ((this.CannelPolicyByPolicyNosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CannelPolicyByPolicyNosCompleted(this, new CannelPolicyByPolicyNosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPdfUrl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPdfUrl(string policyNos, string certificateKey) {
            object[] results = this.Invoke("GetPdfUrl", new object[] {
                        policyNos,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPdfUrl(string policyNos, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPdfUrl", new object[] {
                        policyNos,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPdfUrl(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPdfUrlAsync(string policyNos, string certificateKey) {
            this.GetPdfUrlAsync(policyNos, certificateKey, null);
        }
        
        /// <remarks/>
        public void GetPdfUrlAsync(string policyNos, string certificateKey, object userState) {
            if ((this.GetPdfUrlOperationCompleted == null)) {
                this.GetPdfUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPdfUrlOperationCompleted);
            }
            this.InvokeAsync("GetPdfUrl", new object[] {
                        policyNos,
                        certificateKey}, this.GetPdfUrlOperationCompleted, userState);
        }
        
        private void OnGetPdfUrlOperationCompleted(object arg) {
            if ((this.GetPdfUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPdfUrlCompleted(this, new GetPdfUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPdfUrlTOB2C", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPdfUrlTOB2C(string policyNos, string key) {
            object[] results = this.Invoke("GetPdfUrlTOB2C", new object[] {
                        policyNos,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPdfUrlTOB2C(string policyNos, string key, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPdfUrlTOB2C", new object[] {
                        policyNos,
                        key}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPdfUrlTOB2C(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPdfUrlTOB2CAsync(string policyNos, string key) {
            this.GetPdfUrlTOB2CAsync(policyNos, key, null);
        }
        
        /// <remarks/>
        public void GetPdfUrlTOB2CAsync(string policyNos, string key, object userState) {
            if ((this.GetPdfUrlTOB2COperationCompleted == null)) {
                this.GetPdfUrlTOB2COperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPdfUrlTOB2COperationCompleted);
            }
            this.InvokeAsync("GetPdfUrlTOB2C", new object[] {
                        policyNos,
                        key}, this.GetPdfUrlTOB2COperationCompleted, userState);
        }
        
        private void OnGetPdfUrlTOB2COperationCompleted(object arg) {
            if ((this.GetPdfUrlTOB2CCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPdfUrlTOB2CCompleted(this, new GetPdfUrlTOB2CCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBalance(string certificateKey) {
            object[] results = this.Invoke("GetBalance", new object[] {
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBalance(string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBalance", new object[] {
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetBalance(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBalanceAsync(string certificateKey) {
            this.GetBalanceAsync(certificateKey, null);
        }
        
        /// <remarks/>
        public void GetBalanceAsync(string certificateKey, object userState) {
            if ((this.GetBalanceOperationCompleted == null)) {
                this.GetBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBalanceOperationCompleted);
            }
            this.InvokeAsync("GetBalance", new object[] {
                        certificateKey}, this.GetBalanceOperationCompleted, userState);
        }
        
        private void OnGetBalanceOperationCompleted(object arg) {
            if ((this.GetBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBalanceCompleted(this, new GetBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMobileMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMobileMessage(string phone, string context, string userName, string certificateKey) {
            object[] results = this.Invoke("SendMobileMessage", new object[] {
                        phone,
                        context,
                        userName,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMobileMessage(string phone, string context, string userName, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMobileMessage", new object[] {
                        phone,
                        context,
                        userName,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSendMobileMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMobileMessageAsync(string phone, string context, string userName, string certificateKey) {
            this.SendMobileMessageAsync(phone, context, userName, certificateKey, null);
        }
        
        /// <remarks/>
        public void SendMobileMessageAsync(string phone, string context, string userName, string certificateKey, object userState) {
            if ((this.SendMobileMessageOperationCompleted == null)) {
                this.SendMobileMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMobileMessageOperationCompleted);
            }
            this.InvokeAsync("SendMobileMessage", new object[] {
                        phone,
                        context,
                        userName,
                        certificateKey}, this.SendMobileMessageOperationCompleted, userState);
        }
        
        private void OnSendMobileMessageOperationCompleted(object arg) {
            if ((this.SendMobileMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMobileMessageCompleted(this, new SendMobileMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendEmailMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmailMessage(string to, string subject, string body, string certificateKey) {
            object[] results = this.Invoke("SendEmailMessage", new object[] {
                        to,
                        subject,
                        body,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendEmailMessage(string to, string subject, string body, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendEmailMessage", new object[] {
                        to,
                        subject,
                        body,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSendEmailMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailMessageAsync(string to, string subject, string body, string certificateKey) {
            this.SendEmailMessageAsync(to, subject, body, certificateKey, null);
        }
        
        /// <remarks/>
        public void SendEmailMessageAsync(string to, string subject, string body, string certificateKey, object userState) {
            if ((this.SendEmailMessageOperationCompleted == null)) {
                this.SendEmailMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailMessageOperationCompleted);
            }
            this.InvokeAsync("SendEmailMessage", new object[] {
                        to,
                        subject,
                        body,
                        certificateKey}, this.SendEmailMessageOperationCompleted, userState);
        }
        
        private void OnSendEmailMessageOperationCompleted(object arg) {
            if ((this.SendEmailMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailMessageCompleted(this, new SendEmailMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProductAmount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetProductAmount(string planCode, int DiffDay, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<bool> age, string certificateKey) {
            object[] results = this.Invoke("GetProductAmount", new object[] {
                        planCode,
                        DiffDay,
                        age,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProductAmount(string planCode, int DiffDay, System.Nullable<bool> age, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProductAmount", new object[] {
                        planCode,
                        DiffDay,
                        age,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetProductAmount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductAmountAsync(string planCode, int DiffDay, System.Nullable<bool> age, string certificateKey) {
            this.GetProductAmountAsync(planCode, DiffDay, age, certificateKey, null);
        }
        
        /// <remarks/>
        public void GetProductAmountAsync(string planCode, int DiffDay, System.Nullable<bool> age, string certificateKey, object userState) {
            if ((this.GetProductAmountOperationCompleted == null)) {
                this.GetProductAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductAmountOperationCompleted);
            }
            this.InvokeAsync("GetProductAmount", new object[] {
                        planCode,
                        DiffDay,
                        age,
                        certificateKey}, this.GetProductAmountOperationCompleted, userState);
        }
        
        private void OnGetProductAmountOperationCompleted(object arg) {
            if ((this.GetProductAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductAmountCompleted(this, new GetProductAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPolicyNum", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPolicyNum(string customerName, string iDNum, string certificateKey) {
            object[] results = this.Invoke("GetPolicyNum", new object[] {
                        customerName,
                        iDNum,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPolicyNum(string customerName, string iDNum, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPolicyNum", new object[] {
                        customerName,
                        iDNum,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPolicyNum(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPolicyNumAsync(string customerName, string iDNum, string certificateKey) {
            this.GetPolicyNumAsync(customerName, iDNum, certificateKey, null);
        }
        
        /// <remarks/>
        public void GetPolicyNumAsync(string customerName, string iDNum, string certificateKey, object userState) {
            if ((this.GetPolicyNumOperationCompleted == null)) {
                this.GetPolicyNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPolicyNumOperationCompleted);
            }
            this.InvokeAsync("GetPolicyNum", new object[] {
                        customerName,
                        iDNum,
                        certificateKey}, this.GetPolicyNumOperationCompleted, userState);
        }
        
        private void OnGetPolicyNumOperationCompleted(object arg) {
            if ((this.GetPolicyNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPolicyNumCompleted(this, new GetPolicyNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrderNum", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrderNum(string orderNum, string certificateKey) {
            object[] results = this.Invoke("GetOrderNum", new object[] {
                        orderNum,
                        certificateKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrderNum(string orderNum, string certificateKey, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrderNum", new object[] {
                        orderNum,
                        certificateKey}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetOrderNum(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderNumAsync(string orderNum, string certificateKey) {
            this.GetOrderNumAsync(orderNum, certificateKey, null);
        }
        
        /// <remarks/>
        public void GetOrderNumAsync(string orderNum, string certificateKey, object userState) {
            if ((this.GetOrderNumOperationCompleted == null)) {
                this.GetOrderNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderNumOperationCompleted);
            }
            this.InvokeAsync("GetOrderNum", new object[] {
                        orderNum,
                        certificateKey}, this.GetOrderNumOperationCompleted, userState);
        }
        
        private void OnGetOrderNumOperationCompleted(object arg) {
            if ((this.GetOrderNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderNumCompleted(this, new GetOrderNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void doSaleServiceCompletedEventHandler(object sender, doSaleServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSaleServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSaleServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CannelPolicyByPolicyNosCompletedEventHandler(object sender, CannelPolicyByPolicyNosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CannelPolicyByPolicyNosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CannelPolicyByPolicyNosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPdfUrlCompletedEventHandler(object sender, GetPdfUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPdfUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPdfUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPdfUrlTOB2CCompletedEventHandler(object sender, GetPdfUrlTOB2CCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPdfUrlTOB2CCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPdfUrlTOB2CCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetBalanceCompletedEventHandler(object sender, GetBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SendMobileMessageCompletedEventHandler(object sender, SendMobileMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMobileMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMobileMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SendEmailMessageCompletedEventHandler(object sender, SendEmailMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetProductAmountCompletedEventHandler(object sender, GetProductAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPolicyNumCompletedEventHandler(object sender, GetPolicyNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPolicyNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPolicyNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetOrderNumCompletedEventHandler(object sender, GetOrderNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
