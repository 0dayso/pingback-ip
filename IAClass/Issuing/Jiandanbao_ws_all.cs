//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 
namespace Jiandanbao
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelOrderOperationCompleted;
        
        /// <remarks/>
        public Service() {
            this.Url = "http://api.jiandanbao.com:6665/Service.asmx";
        }
        
        /// <remarks/>
        public event InsertOrderCompletedEventHandler InsertOrderCompleted;
        
        /// <remarks/>
        public event GetOrderCompletedEventHandler GetOrderCompleted;
        
        /// <remarks/>
        public event CancelOrderCompletedEventHandler CancelOrderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertOrder(string xmlDoc) {
            object[] results = this.Invoke("InsertOrder", new object[] {
                        xmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertOrder(string xmlDoc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertOrder", new object[] {
                        xmlDoc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndInsertOrder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertOrderAsync(string xmlDoc) {
            this.InsertOrderAsync(xmlDoc, null);
        }
        
        /// <remarks/>
        public void InsertOrderAsync(string xmlDoc, object userState) {
            if ((this.InsertOrderOperationCompleted == null)) {
                this.InsertOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOrderOperationCompleted);
            }
            this.InvokeAsync("InsertOrder", new object[] {
                        xmlDoc}, this.InsertOrderOperationCompleted, userState);
        }
        
        private void OnInsertOrderOperationCompleted(object arg) {
            if ((this.InsertOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertOrderCompleted(this, new InsertOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrder(string xmlDoc) {
            object[] results = this.Invoke("GetOrder", new object[] {
                        xmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrder(string xmlDoc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrder", new object[] {
                        xmlDoc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetOrder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderAsync(string xmlDoc) {
            this.GetOrderAsync(xmlDoc, null);
        }
        
        /// <remarks/>
        public void GetOrderAsync(string xmlDoc, object userState) {
            if ((this.GetOrderOperationCompleted == null)) {
                this.GetOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderOperationCompleted);
            }
            this.InvokeAsync("GetOrder", new object[] {
                        xmlDoc}, this.GetOrderOperationCompleted, userState);
        }
        
        private void OnGetOrderOperationCompleted(object arg) {
            if ((this.GetOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderCompleted(this, new GetOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelOrder(string XmlDoc) {
            object[] results = this.Invoke("CancelOrder", new object[] {
                        XmlDoc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelOrder(string XmlDoc, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelOrder", new object[] {
                        XmlDoc}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCancelOrder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelOrderAsync(string XmlDoc) {
            this.CancelOrderAsync(XmlDoc, null);
        }
        
        /// <remarks/>
        public void CancelOrderAsync(string XmlDoc, object userState) {
            if ((this.CancelOrderOperationCompleted == null)) {
                this.CancelOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelOrderOperationCompleted);
            }
            this.InvokeAsync("CancelOrder", new object[] {
                        XmlDoc}, this.CancelOrderOperationCompleted, userState);
        }
        
        private void OnCancelOrderOperationCompleted(object arg) {
            if ((this.CancelOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelOrderCompleted(this, new CancelOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void InsertOrderCompletedEventHandler(object sender, InsertOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
